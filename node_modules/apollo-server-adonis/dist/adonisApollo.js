"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_core_1 = require("apollo-server-core");
var GraphiQL = require("apollo-server-module-graphiql");
function graphqlAdonis(options) {
    if (!options) {
        throw new Error('Apollo Server requires options.');
    }
    if (arguments.length > 1) {
        throw new Error("Apollo Server expects exactly one argument, got " + arguments.length);
    }
    var graphqlHandler = function (ctx) {
        var request = ctx.request, response = ctx.response;
        var method = request.method();
        var query = method === 'POST' ? request.post() : request.get();
        return apollo_server_core_1.runHttpQuery([ctx], {
            method: method,
            options: options,
            query: query,
        }).then(function (gqlResponse) {
            response.type('application/json');
            response.json(gqlResponse);
        }, function (error) {
            if ('HttpQueryError' !== error.name) {
                throw error;
            }
            if (error.headers) {
                Object.keys(error.headers).forEach(function (header) {
                    response.header(header, error.headers[header]);
                });
            }
            response.status(error.statusCode).send(error.message);
        });
    };
    return graphqlHandler;
}
exports.graphqlAdonis = graphqlAdonis;
function graphiqlAdonis(options) {
    var graphiqlHandler = function (ctx) {
        var request = ctx.request, response = ctx.response;
        var query = request.get();
        return GraphiQL.resolveGraphiQLString(query, options, ctx).then(function (graphiqlString) {
            response.type('text/html').send(graphiqlString);
        }, function (error) {
            response.status(500).send(error.message);
        });
    };
    return graphiqlHandler;
}
exports.graphiqlAdonis = graphiqlAdonis;
//# sourceMappingURL=adonisApollo.js.map